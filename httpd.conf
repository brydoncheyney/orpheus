#
# This is the main Apache HTTP server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.
# In particular, see 
# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>
# for a discussion of each configuration directive.
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.  
#
# Configuration and logfile names: If the filenames you specify for many
# of the server's control files begin with "/" (or "drive:/" for Win32), the
# server will use that explicit path.  If the filenames do *not* begin
# with "/", the value of ServerRoot is prepended -- so 'log/access_log'
# with ServerRoot set to '/www' will be interpreted by the
# server as '/www/log/access_log', where as '/log/access_log' will be
# interpreted as '/log/access_log'.
#

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# Do not add a slash at the end of the directory path.  If you point
# ServerRoot at a non-local disk, be sure to specify a local disk on the
# Mutex directive, if file-based mutexes are used.  If you wish to share the
# same ServerRoot for multiple httpd daemons, you will need to change at
# least PidFile.
#
ServerRoot "/opt/rh/httpd24/root/etc/httpd"

#
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, instead of the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to 
# prevent Apache from glomming onto all bound IP addresses.
#
Listen 80

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding `LoadModule' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Statically compiled modules (those listed by `httpd -l') do not need
# to be loaded here.
#
LoadModule allowmethods_module modules/mod_allowmethods.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule autoindex_module modules/mod_autoindex.so
LoadModule dir_module modules/mod_dir.so
LoadModule headers_module modules/mod_headers.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule mime_magic_module modules/mod_mime_magic.so
LoadModule mime_module modules/mod_mime.so
LoadModule negotiation_module modules/mod_negotiation.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule filter_module modules/mod_filter.so
LoadModule substitute_module modules/mod_substitute.so

#
# Multi-Processing Module (MPM) selection.  Uncomment exactly one.
#
#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
#LoadModule mpm_worker_module modules/mod_mpm_worker.so
LoadModule mpm_event_module modules/mod_mpm_event.so

#
# If you wish httpd to run as a different user or group, you must run
# httpd as root initially and it will switch.  
#
# User/Group: The name (or #number) of the user/group to run httpd as.
# It is usually good practice to create a dedicated user and group for
# running httpd, as with most system services.
#
User apache
Group apache

#
# Don't give away too much information about all the subcomponents
# we are running.
#
ServerTokens ProductOnly

#
# TraceEnable: This directive overrides the behavior of TRACE for both the
# core server and mod_proxy.  The default TraceEnable on permits TRACE
# requests per RFC 2616, which disallows any request body to accompany the
# request.  TraceEnable Off causes the core server and mod_proxy to return a
# 405 (Method not allowed) error to the client.
#
TraceEnable Off


# 'Main' server configuration
#
# The directives in this section set up the values used by the 'main'
# server, which responds to any requests that aren't handled by a
# <VirtualHost> definition.  These values also provide defaults for
# any <VirtualHost> containers you may define later in the file.
#
# All of these directives may appear inside <VirtualHost> containers,
# in which case these default settings will be overridden for the
# virtual host being defined.
#

#
# ServerAdmin: Your address, where problems with the server should be
# e-mailed.  This address appears on some server-generated pages, such
# as error documents.
#
#ServerAdmin root@localhost

#
# ServerName gives the name and port that the server uses to identify itself.
# This can often be determined automatically, but we recommend you specify
# it explicitly to prevent problems during startup.
#
# If your host doesn't have a registered DNS name, enter its IP address here.
#
ServerName orpheus:80

#
# Deny access to the entirety of your server's filesystem. You must
# explicitly permit access to web content directories in other 
# <Directory> blocks below.
#
<Directory "/">
    AllowOverride None
    Require all denied
</Directory>

#
# Restrict access to the listed HTTP methods.
#
# NOTE: The TRACE method cannot be denied by this module; use TraceEnable
# instead (above).
#
<Location "/">
   AllowMethods GET POST OPTIONS
</Location>

#
# Note that from this point forward you must specifically allow
# particular features to be enabled - so if something's not working as
# you might expect, make sure that you have specifically enabled it
# below.
#

#
# DocumentRoot: The directory out of which you will serve your
# documents. By default, all requests are taken from this directory, but
# symbolic links and aliases may be used to point to other locations.
#
DocumentRoot "/opt/rh/httpd24/root/var/www/html"

#
# Relax access to content within /opt/rh/httpd24/root/var/www.
#
<Directory "/opt/rh/httpd24/root/var/www">
    AllowOverride None
    Require all granted
</Directory>

# Further relax access to the default document root.
<Directory "/opt/rh/httpd24/root/var/www/html">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

#
# DirectoryIndex: Sets the file that Apache will serve if a directory
# is requested.
#
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>

#
# The following lines prevent .htaccess and .htpasswd files from being 
# viewed by Web clients. 
#
<Files ".ht*">
    Require all denied
</Files>

#
# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog "logs/error_log"

#
# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
#
LogLevel warn

<IfModule log_config_module>
    #
    # The following directives define some format nicknames for use with
    # a CustomLog directive (see below).
    #
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common

    <IfModule logio_module>
      # You need to enable mod_logio.c to use %I and %O
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>

    #
    # The location and format of the access logfile (Common Logfile Format).
    # If you do not define any access logfiles within a <VirtualHost>
    # container, they will be logged here.  Contrariwise, if you *do*
    # define per-<VirtualHost> access logfiles, transactions will be
    # logged therein and *not* in this file.
    #
    #CustomLog "logs/access_log" common

    #
    # If you prefer a logfile with access, agent, and referer information
    # (Combined Logfile Format) you can use the following directive.
    #
    CustomLog "logs/access_log" combined
</IfModule>

<IfModule mime_module>
    #
    # TypesConfig points to the file containing the list of mappings from
    # filename extension to MIME-type.
    #
    TypesConfig /etc/mime.types

    #
    # AddType allows you to add to or override the MIME configuration
    # file specified in TypesConfig for specific file types.
    #
    #AddType application/x-gzip .tgz
    #
    # AddEncoding allows you to have certain browsers uncompress
    # information on the fly. Note: Not all browsers support this.
    #
    #AddEncoding x-compress .Z
    #AddEncoding x-gzip .gz .tgz
    #
    # If the AddEncoding directives above are commented-out, then you
    # probably should define those extensions to indicate media types:
    #
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz

    #
    # AddHandler allows you to map certain file extensions to "handlers":
    # actions unrelated to filetype. These can be either built into the server
    # or added with the Action directive (see below)
    #
    # To use CGI scripts outside of ScriptAliased directories:
    # (You will also need to add "ExecCGI" to the "Options" directive.)
    #
    #AddHandler cgi-script .cgi

    # For type maps (negotiated resources):
    #AddHandler type-map var

    #
    # Filters allow you to process content before it is sent to the client.
    #
    # To parse .shtml files for server-side includes (SSI):
    # (You will also need to add "Includes" to the "Options" directive.)
    #
    AddType text/html .shtml
    AddOutputFilter INCLUDES .shtml
</IfModule>

#
# Specify a default charset for all content served; this enables
# interpretation of all content as UTF-8 by default.  To use the 
# default browser choice (ISO-8859-1), or to allow the META tags
# in HTML content to override this choice, comment out this
# directive:
#
AddDefaultCharset UTF-8

<IfModule mime_magic_module>
    #
    # The mod_mime_magic module allows the server to use various hints from the
    # contents of the file itself to determine its type.  The MIMEMagicFile
    # directive tells the module where the hint definitions are located.
    #
    MIMEMagicFile conf/magic
</IfModule>

#
# EnableMMAP and EnableSendfile: On systems that support it, 
# memory-mapping or the sendfile syscall may be used to deliver
# files.  This usually improves server performance, but must
# be turned off when serving from networked-mounted 
# filesystems or if support for these functions is otherwise
# broken on your system.
# Defaults if commented: EnableMMAP On, EnableSendfile Off
#
#EnableMMAP Off
EnableSendfile On

# 
# Apache HTTP Server can be configured in both a forward and reverse proxy
# (also known as gateway) mode.
# 
# An ordinary forward proxy is an intermediate server that sits between the
# client and the origin server.  In order to get content from the origin
# server, the client sends a request to the proxy naming the origin server as
# the target.  The proxy then requests the content from the origin server and
# returns it to the client.  The client must be specially configured to use
# the forward proxy to access other sites.
# 
# A typical usage of a forward proxy is to provide Internet access to internal
# clients that are otherwise restricted by a firewall.  The forward proxy can
# also use caching (as provided by mod_cache) to reduce network usage.
# 
# The forward proxy is activated using the ProxyRequests directive.  Because
# forward proxies allow clients to access arbitrary sites through your server
# and to hide their true origin, it is essential that you secure your server
# so that only authorized clients can access the proxy before activating a
# forward proxy.
# 
# A reverse proxy (or gateway), by contrast, appears to the client just like
# an ordinary web server.  No special configuration on the client is
# necessary.  The client makes ordinary requests for content in the namespace
# of the reverse proxy.  The reverse proxy then decides where to send those
# requests and returns the content as if it were itself the origin.
# 
# A typical usage of a reverse proxy is to provide Internet users access to a
# server that is behind a firewall.  Reverse proxies can also be used to
# balance load among several back-end servers or to provide caching for a
# slower back-end server.  In addition, reverse proxies can be used simply to
# bring several servers into the same URL space.
# 
# A reverse proxy is activated using the ProxyPass directive or the [P] flag
# to the RewriteRule directive.  It is not necessary to turn ProxyRequests on
# in order to configure a reverse proxy.
# 
# See <URL:http://httpd.apache.org/docs/2.4/mod/mod_proxy.html> for detailed
# information.
# 

#
# ProxyRequests: Allows or prevents Apache from functioning as a forward proxy
# server.  Setting ProxyRequests to Off does not disable use of the ProxyPass
# directive.  In a typical reverse proxy or gateway configuration, this option
# should be set to Off.
#
# Strictly limiting access is essential if you are using a forward proxy.
# Otherwise, your server can be used by any client to access arbitrary hosts
# while hiding his or her true identity.  This is dangerous both for your
# network and for the Internet at large.  When using a reverse proxy (using
# the ProxyPass directive with ProxyRequests Off), access control is less
# critical because clients can only contact the hosts that you have
# specifically configured.
#
# ProxyRequests is disabled by default, but we're being explicit here because
# open proxy servers are dangerous both to you and to the Internet at large.
#
ProxyRequests Off

#
# ProxyPass: This directive allows remote servers to be mapped into the space
# of the local server.  The local server does not act as a proxy in the
# conventional sense but appears to be a mirror of the remote server.  The
# local server is often called a reverse proxy or gateway.
#
# If the first argument ends with a trailing /, the second argument should
# also end with a trailing /, and vice versa.  Otherwise, the resulting
# requests to the backend may miss some needed slashes and do not deliver
# the expected results.
#
# When used inside a <Location> section, the first argument is omitted and the
# local directory is obtained from the <Location>.  The same will occur inside
# a <LocationMatch> section; however, ProxyPass does not interpret the regexp
# as such, so it is necessary to use ProxyPassMatch in this situation instead.
#
# If you require a more flexible reverse-proxy configuration, see the
# RewriteRule directive with the [P] flag.
#
# ProxyPassReverse: This directive lets Apache httpd adjust the URL in the
# Location, Content-Location and URI headers on HTTP redirect responses. This
# is essential when Apache httpd is used as a reverse proxy (or gateway) to
# avoid bypassing the reverse proxy because of HTTP redirects on the backend
# servers which stay behind the reverse proxy.
#
# Only the HTTP response headers specifically mentioned above will be
# rewritten.  Apache httpd will not rewrite other response headers, nor will
# it by default rewrite URL references inside HTML pages.  This means that if
# the proxied content contains absolute URL references, they will bypass the
# proxy.  To rewrite HTML content to match the proxy, you must load and enable
# mod_proxy_html. 
#
# Note that this ProxyPassReverse directive can also be used in conjunction
# with the proxy feature (RewriteRule ... [P]) from mod_rewrite because it
# doesn't depend on a corresponding ProxyPass directive.
#
# When used inside a <Location> section, the first argument is omitted and the
# local directory is obtained from the <Location>.  The same occurs inside a
# <LocationMatch> section, but will probably not work as intended, as
# ProxyPassReverse will interpret the regexp literally as a path; if needed in 
# this situation, specify the ProxyPassReverse outside the section or in a
# separate <Location> section.
#
<Location "/vin-tanner/">
    ProxyPass "http://127.0.0.1:8000/"
    ProxyPassReverse "http://127.0.0.1:8000/"
</Location>
<Location "/chico/">
    ProxyPass "http://192.168.56.7:8001/"
    ProxyPassReverse "http://192.168.56.7:8001/"
</Location>
<Location "/bernardo-oreilly/">
    ProxyPass "http://192.168.56.7:8002/"
    ProxyPassReverse "http://192.168.56.7:8002/"
</Location>
<Location "/lee-basset/">
    ProxyPass "http://192.168.56.8:8003/app/"
    ProxyPassReverse "http://192.168.56.8:8003/app/"
</Location>
<Location "/britt-avery/">
    ProxyPass "http://192.168.56.8:8004/app/"
    ProxyPassReverse "http://192.168.56.8:8004/app/"
</Location>

#
# mod_filter enables smart, context-sensitive configuration of output content
# filters.  For example, apache can be configured to process different
# content-types through different filters, even when the content-type is not
# known in advance (e.g. in a proxy).
#
# mod_substitute provides a mechanism to perform both regular expression and
# fixed string substitutions on response bodies.
#
# We use mod_filter and mod_substitute to automatically inject JavaScript
# into pages the origin server.
#
<Location "/">
    AddOutputFilterByType SUBSTITUTE text/html
    Substitute "s|</head>|<!-- injected by apache --><script src=\"/orpheus.js\"></script><!-- --></head>|in"
</Location>
